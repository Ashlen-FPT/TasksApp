@model IEnumerable<TasksApp.Models.DailyWeigh>

@{
    ViewData["Title"] = "Index";
}
<style>
    .test {
        margin: auto;
        position: absolute;
        top: 75%;
        left: 50%;
        -ms-transform: translate(-50%, -50%);
        transform: translate(-50%, -50%);
    }
</style>
<link rel="stylesheet" type="text/css" href="https://cdnjs.cloudflare.com/ajax/libs/toastr.js/latest/toastr.min.css" />
<link href="~/plugins/fontawesome-free/css/all.css" rel="stylesheet" />
<link href="~/css/DataTable/datatables.min.css" rel="stylesheet" />
<script src="~/js/DataTable/datatables.min.js"></script>

<h4>DAILY WEIGHBRIDGE TEST</h4>

<div class="form-group">
    @*<label class="control-label">Choose date</label>*@
    <input class="form-control" id="datePicker" type="date" value="@DateTime.Now.Date.ToString("yyyy-MM-dd")" max="@DateTime.Now.Date.ToString("yyyy-MM-dd")" />

</div>

@if (User.IsInRole(SD.Role_Operator.ToString()))
{
    <div class="form-group" style="padding-right:12px;">
        <button type="button" class="btn btn-success" data-toggle="modal" data-target="#exampleModal" style="float:right;">
            <i class="fa fa-plus"></i> New Weighbridge Test
        </button>
    </div>


    <div class="card text-center" style="width: 100%;">


        <div class="card-title">
            <ul class="nav nav-pills mb-3" style="padding:10px" id="pills-tab" role="tablist">
                <li class="nav-item">
                    <a class="nav-link active" id="pills-home-tab" data-toggle="pill" href="#pills-home" role="tab" aria-controls="pills-home" aria-selected="true">Daily</a>
                </li>
            </ul>
        </div>

        <div class="card-body">
            <div class="tab-content" id="pills-tabContent">
                <div class="tab-pane fade show active" id="pills-home" role="tabpanel" aria-labelledby="pills-home-tab">
                    <table class="table table-striped table-bordered table-hover" id="tbl" style=" word-wrap:break-word; width:65%; table-layout:fixed; outline: thin solid black">
                        <thead class="thead-dark">
                            <tr class="table-info" style=" outline: thin solid black">
                                <th>Gross Weight</th>
                                <th>Tare Weight</th>
                                <th>Net Weight</th>
                                <th>Observation</th>
                                <th>Date Completed</th>
                            </tr>
                        </thead>
                    </table>

                    <br />
                    <br />

                    <table id="tbl1" style=" word-wrap:break-word; width:45%; table-layout:fixed" hidden>
                        <thead class="thead-dark" style='display:none;'>
                            <tr class="table-info">
                                <th></th>
                                <th>Supervisor</th>
                                <th>Signature</th>
                                <th>Date</th>
                                <th></th>
                            </tr>
                        </thead>
                    </table>

                    @*<div class="form-group" style="padding-right:12px;">
                            <i class="fa fa-check"></i>Supervisor Signature
                            <input type="checkbox" class="btn btn-success" id="Check" onclick="Signature()">
                        </div>*@
                </div>
            </div>
        </div>
    </div>
}

@if (User.IsInRole(SD.Role_Supervisor.ToString()))
{
    <div class="card-body">
        <div class="tab-content" id="pills-tabContent">
            <div class="tab-pane fade show active" id="pills-home" role="tabpanel" aria-labelledby="pills-home-tab">
                <table class="table table-striped table-bordered table-hover" id="tbl2" style=" word-wrap:break-word; width:65%; table-layout:fixed; outline: thin solid black">
                    <thead class="thead-dark">
                        <tr class="table-info" style=" outline: thin solid black">
                            <th>Gross Weight</th>
                            <th>Tare Weight</th>
                            <th>Net Weight</th>
                            <th>Observation</th>
                            <th>Date Completed</th>
                        </tr>
                    </thead>
                </table>

                <br />
                <br />

                <table id="tbl1" style=" word-wrap:break-word; width:45%; table-layout:fixed">
                    <thead class="thead-dark" style='display:none;'>
                        <tr class="table-info">
                            @*<th></th>*@
                            <th>Supervisor</th>
                            <th>Signature</th>
                            <th>Date</th>
                            @*<th></th>*@
                        </tr>
                    </thead>
                </table>
            </div>
        </div>
    </div>
}


<!-- Add Weighbridge Modal -->
<div class="modal fade" id="exampleModal" tabindex="-1" role="dialog" aria-labelledby="exampleModalLabel" aria-hidden="true">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="exampleModalLabel">Add Weighbridge Test</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">

                <div asp-validation-summary="ModelOnly" class="text-danger"></div>
                <form id="form">

                        <table class="center table table-striped table-bordered table-hover" style=" word-wrap:break-word; table-layout:fixed">
                            <thead class="thead-dark">
                                <tr>
                                    <th style="width:40%"> @Html.DisplayNameFor(model => model.Date) </th>

                                    <td>
                                        @DateTime.Now.ToString("yyyy/MM/dd")
                                    </td>
                                </tr>

                                <tr>
                                    <th style="width:40%"> @Html.DisplayNameFor(model => model.Time) </th>

                                    <td>
                                        @DateTime.Now.ToString("HH:mm tt")
                                    </td>
                                </tr>

                                <tr>
                                    <th style="width:40%"> @Html.DisplayNameFor(model => model.Supervisor) </th>

                                    <td>
                                        @User.FindFirst("Username")?.Value
                                    </td>
                                </tr>
                            </thead>
                        </table>
                        @*<p id="Id" hidden>
                @foreach (var item in Model)
                {
                    @Html.DisplayFor(modelItem => item.Id)
                }
            </p>*@
                        <br />

                        <p><b>Readings should always show 0.0g</b></p>

                        <br />

                        <table class="center table table-striped table-bordered table-hover" style=" word-wrap:break-word; table-layout:fixed ;">
                            <thead class="thead-dark">
                                <tr class="table-info">
                                    <th style="width:20%">
                                        @Html.DisplayNameFor(model => model.Gross)
                                    </th>
                                    <th style="width:20%">
                                        @Html.DisplayNameFor(model => model.Tare)
                                    </th>
                                    <th style="width:20%">
                                        @Html.DisplayNameFor(model => model.Net)
                                    </th>
                                    <th style="width:50%">
                                        @Html.DisplayNameFor(model => model.Observation)
                                    </th>
                                </tr>
                            </thead>

                            <tbody>
                                <tr>
                                    <td> <input type="number" style="width:90%" id="Gross1" /></td>
                                    <td> <input type="number" style="width:90%" id="Tare1" /></td>
                                    <td> <input type="text" style="width:90%" id="Net1" disabled="disabled" /></td>
                                    <td>
                                        <input type="text" style="width:90%;" id="Obs1" size="50" />
                                    </td>
                                </tr>
                            </tbody>
                        </table>
                        <div style="padding-bottom:30px;">
                            <a class="btn btn-warning test" id="GetFull" onclick="GetVGM()">Calculate NET</a>
                        </div>

                        <div class="modal-footer">
                            <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
                            <a onclick="AddTask()" class="btn btn-info">Create</a>
                        </div>

                    </form>
            </div>
        </div>
    </div>
</div>


<html>
@*<head>
        <style>
            p {
                text-align: center;
            }

            table, th, td {
                border: 1px solid black;
                border-collapse: collapse;
            }

                table.center {
                    margin-left: auto;
                    margin-right: auto;
                }
        </style>
    </head>*@
<body>

</body>
</html>

<script src="~/plugins/jquery/jquery.js"></script>

<script>
    //var getId = document.getElementById("Id").innerHTML;
    //console.log(getId);

    function GetVGM() {
        var Gross1 = parseInt(document.getElementById("Gross1").value);
        var Tare1 = parseInt(document.getElementById("Tare1").value);
        var Net1 = Gross1 - Tare1;
        var Myelement = document.getElementById("Net1");
        console.log(Myelement.value);
        Myelement.value = Net1;
        //document.getElementById(Net1).value = Net1
        console.log(document.getElementById("Net1").value);
    }

    function AddTask() {
        var Gross = parseInt(document.getElementById("Gross1").value);

        var Tare = parseInt(document.getElementById("Tare1").value);

        var Net = document.getElementById("Net1").value;

        var Observation = document.getElementById("Obs1").value

        var date = document.getElementById("datePicker").value;

        $.ajax({
            type: "GET",
            url: "/DailyWeighs/AddTask?Gross="+ Gross + "&Tare=" + Tare + "&Net=" + Net + "&Observation=" + Observation + "&date=" + date,
            success: function (data) {
                if (data.success) {
                    $("#exampleModal").modal("toggle")
                    $('body').removeClass('modal-open');
                    $('.modal-backdrop').remove();

                    swal(data.message, "", "success");
                    Table01.ajax.reload();
                }
                else {
                    toastr.error(data.message);
                }
            }
        });

    }

    $(document).ready(function () {
        var date = document.getElementById("datePicker").value;
        loadTable(date);
        loadSignTable(date);

        $.ajax({
            type: "GET",
            dataType: 'json',
            url: "/DailyWeighs/GetAll?date=" + date,
            async: false,
            success: function (response) {

            }
        });
    });


    $('#datePicker').change(function () {
        var date = document.getElementById("datePicker").value;
        //$("form").destroy();
        Table01.destroy();
        Table02.destroy();
        Table03.destroy();
        loadTable(date);
        loadSignTable(date);
        //$('datePicker').load("form")


        $.ajax({
            type: "GET",
            dataType: 'json',
            url: "/DailyWeighs/GetAll?date=" + date,
            async: false,
            success: function (response) {

            }
        });

    });

    function loadSignTable(date) {

        Table02 = $("#tbl1").DataTable({
            "paging": false,
            "searching": false,
            "info": false,
            "ordering": false,
            "ajax": {
                "url": "/DailyWeighs/GetSignOff?date=" + date
            },
            "columns": [

                {
                    "data": {
                        supervisor: "supervisor"
                    },

                    "render": function(data){
                        return`@if (User.IsInRole(SD.Role_Supervisor.ToString())) {
                            @User.FindFirst("Username")?.Value
                        }`
                    },"width": "50%"
                },

                {
                    "data": {
                        id: "id", isDone: "isDone"
                    },
                    "render": function (data) {
                        if (data.isDone == true) {


                            return `
                                    <div class="text-center">
                                       <input disabled type="checkbox" checked="true" />

                                    </div>
                            `;

                        }

                        if (data.isDone == false) {


                            return `
                                    <div class="text-center">
                                       <input onclick=Delete("/DailyWeighs/Sign/${data.id}") type="checkbox" />

                                    </div>
                                `;

                        }

                    }, "width": "40%"
                },

                {
                    "data": "dateAllTaskCompleted",
                    'render': function (jsonDate) {

                        if (jsonDate == "0001-01-01T00:00:00") {
                            return " ";
                        }
                        else {
                            var datestr = jsonDate.toString();
                            var date = new Date(datestr.substr(0, 10));
                            var month = ("0" + (date.getMonth() + 1)).slice(-2);
                            var time = datestr.substr(11)
                            var hr = time.substr(0, 2)
                            var min = time.substr(3, 2)
                            var sec = time.substr(6, 2);
                            return ("0" + date.getDate()).slice(-2) + '-' + month + '-' + date.getFullYear() + "  " + hr + ":" + min + ":" + sec;
                        }

                    }, "width": "50%"
                },
                /*{ "data": "", "width": "50%" },*/

            ],

        });
    }

    function loadTable(date) {

        Table01 = $("#tbl").DataTable({
            "paging": false,
            "info": false,
            "ajax": {
                "url": "/DailyWeighs/GetAll?date=" + date,
            },
            responsive: true,
            autoWidth: false,
            "columns": [
                { "data": "gross", "width": "32%" },
                { "data": "tare", "width": "30%" },
                { "data": "net", "width": "30%" },
                { "data": "observation", "width": "55%" },

                {
                    "data": "dateCompleted",
                    'render': function (jsonDate) {

                        if (jsonDate == "0001-01-01T00:00:00") {
                            return " ";
                        }
                        else {
                            var datestr = jsonDate.toString();
                            var date = new Date(datestr.substr(0, 10));
                            var month = ("0" + (date.getMonth() + 1)).slice(-2);
                            var time = datestr.substr(11)
                            var hr = time.substr(0, 2)
                            var min = time.substr(3, 2)
                            var sec = time.substr(6, 2);
                            return ("0" + date.getDate()).slice(-2) + '-' + month + '-' + date.getFullYear() + "  " + hr + ":" + min + ":" + sec;
                        }

                    }, "width": "45%"
                },
                /*{ "data": "userEmail", "width": "50%" },*/

            ]
        });

        Table03 = $("#tbl2").DataTable({
            "paging": false,
            "info": false,
            "ajax": {
                "url": "/DailyWeighs/AdminGetAll?date=" + date,
            },
            responsive: true,
            autoWidth: false,
            "columns": [
                { "data": "gross", "width": "32%" },
                { "data": "tare", "width": "30%" },
                { "data": "net", "width": "30%" },
                { "data": "observation", "width": "55%" },

                {
                    "data": "dateCompleted",
                    'render': function (jsonDate) {

                        if (jsonDate == "0001-01-01T00:00:00") {
                            return " ";
                        }
                        else {
                            var datestr = jsonDate.toString();
                            var date = new Date(datestr.substr(0, 10));
                            var month = ("0" + (date.getMonth() + 1)).slice(-2);
                            var time = datestr.substr(11)
                            var hr = time.substr(0, 2)
                            var min = time.substr(3, 2)
                            var sec = time.substr(6, 2);
                            return ("0" + date.getDate()).slice(-2) + '-' + month + '-' + date.getFullYear() + "  " + hr + ":" + min + ":" + sec;
                        }

                    }, "width": "45%"
                },
                /*{ "data": "userEmail", "width": "50%" },*/

            ]
        });
    }

    function Delete(url) {

        var uri = url;
        var res = encodeURI(uri);
        swal({
            title: "Are you sure you want to Sign-Off this Daily Weighbridge Test?",
            text: "You will not be able to undo the Signature!",
            icon: "warning",
            buttons: true,
            dangerMode: true
        }).then((willDelete) => {
            if (willDelete) {
                $.ajax({
                    type: "GET",
                    url: res,
                    success: function (data) {
                        if (data.success) {
                            var date = document.getElementById("datePicker").value;
                            $.ajax({
                                type: "GET",
                                dataType: 'json',
                                url: "/DailyWeighs/GetAll?date=" + date,
                                async: false,
                                success: function (response) {
                                    console.log(response)
                                    var count = 0;

                                    for (var i = 0; i < response.data.length; i++) {

                                        if (response.data[i].isDone == true) {
                                            count += 1;
                                        }

                                    }

                                    var p = (count / response.data.length) * 100;
                                    document.getElementById("progressbar").style.width = p + "%";
                                    document.getElementById("progressbar").innerHTML = Math.round(p) + "%";
                                }
                            });
                            toastr.success(data.message);
                            Table01.ajax.reload();
                            Table02.ajax.reload();

                        }
                        else {
                            toastr.error(data.message);
                        }
                    }
                });
            }
        });
    }

    var CommentId = 1;

    function showModal(event) {
        $('#exampleModal').modal("toggle");
        CommentId = event.dataset.id

        $.ajax({
            type: "GET",
            dataType: 'json',
            url: "/DailyWeighs/GetTask?id=" + CommentId,
            async: false,
            success: function (response) {
                document.getElementById("message-text").value = response.comments;
                console.log(response.comments)
            }
        });
    }

    function SaveComment() {

        console.log("save")
        var comment = document.getElementById("message-text").value;
        $.ajax({

            type: "GET",
            dataType: 'json',
            url: "/DailyWeighs/AddComment?id=" + CommentId + "&comment=" + comment,
            async: false,
            success: function (response) {
                toastr.success(response.message);
                Table01.ajax.reload();
            }
        });

        $('#exampleModal').modal("toggle");
    }
</script>
